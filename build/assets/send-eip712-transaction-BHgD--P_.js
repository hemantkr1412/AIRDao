import{e as w}from"./eth_sendRawTransaction-DPdnXbFR.js";import{u as E,B as b,E as x,a4 as L,V as o,ax as f,a6 as F,a8 as g,b as G,ag as v}from"./index-Y5f_iS2-.js";import{concatHex as _}from"./concat-hex-aYp195_m.js";import{a as z,s as D,t as S}from"./sha256-J4lsYYKo.js";function l(a){if(["string","number"].includes(typeof a)&&!Number.isInteger(Number(a)))throw new Error(`Expected value to be an integer to convert to a bigint, got ${a} of type ${typeof a}`);return a instanceof Uint8Array?BigInt(E(a)):BigInt(a)}const P=z*32n;class M extends b{constructor({givenLength:t,maxBytecodeSize:e}){super(`Bytecode cannot be longer than ${e} bytes. Given length: ${t}`,{name:"BytecodeLengthExceedsMaxSizeError"})}}class H extends b{constructor({givenLengthInWords:t}){super(`Bytecode length in 32-byte words must be odd. Given length in words: ${t}`,{name:"BytecodeLengthInWordsMustBeOddError"})}}class $ extends b{constructor({givenLength:t}){super(`The bytecode length in bytes must be divisible by 32. Given length: ${t}`,{name:"BytecodeLengthMustBeDivisibleBy32Error"})}}function W(a){const t=x(a);if(t.length%32!==0)throw new $({givenLength:t.length});if(t.length>P)throw new M({givenLength:t.length,maxBytecodeSize:P});const e=D(t),n=x(e),s=t.length/32;if(s%2===0)throw new H({givenLengthInWords:s});const r=x(s),i=L(r,{size:2}),m=new Uint8Array([1,0]);return n.set(m,0),n.set(i,2),n}const B=50000n,A=a=>{const t=R(a);return{domain:{name:"zkSync",version:"2",chainId:a.chainId},types:{Transaction:[{name:"txType",type:"uint256"},{name:"from",type:"uint256"},{name:"to",type:"uint256"},{name:"gasLimit",type:"uint256"},{name:"gasPerPubdataByteLimit",type:"uint256"},{name:"maxFeePerGas",type:"uint256"},{name:"maxPriorityFeePerGas",type:"uint256"},{name:"paymaster",type:"uint256"},{name:"nonce",type:"uint256"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"factoryDeps",type:"bytes32[]"},{name:"paymasterInput",type:"bytes"}]},primaryType:"Transaction",message:t}};function R(a){const{gas:t,nonce:e,to:n,from:s,value:r,maxFeePerGas:i,maxPriorityFeePerGas:m,paymaster:y,paymasterInput:u,gasPerPubdata:h,data:d,factoryDeps:c}=a;return{txType:113n,from:BigInt(s),to:n?BigInt(n):0n,gasLimit:t??0n,gasPerPubdataByteLimit:h??B,maxFeePerGas:i??0n,maxPriorityFeePerGas:m??0n,paymaster:y?BigInt(y):0n,nonce:e?BigInt(e):0n,value:r??0n,data:d||"0x0",factoryDeps:(c==null?void 0:c.map(p=>o(W(p))))??[],paymasterInput:u||"0x"}}async function q(a){const{account:t,transaction:e}=a,n=await V(a),s=await U({account:t,eip712Transaction:n,chainId:e.chain.id}),r=f(e);return{transactionHash:await w(r,s),chain:e.chain,client:e.client}}async function U(a){const{account:t,eip712Transaction:e,chainId:n}=a,s=A(e),r=await t.signTypedData({...s});return k({...e,chainId:n,customSignature:r})}async function V(a){const{account:t,transaction:e}=a;let[n,s,r,i,m,y,u]=await Promise.all([F(e),g(e.to),g(e.value),g(e.gas),g(e.maxFeePerGas),g(e.maxPriorityFeePerGas),g(e.eip712).then(d=>d==null?void 0:d.gasPerPubdata)]);if(!i||!m||!y){const c=await f(e)({method:"zks_estimateFee",params:[{from:t.address,to:s,data:n,value:r?G(r):void 0}]});i=l(c.gas_limit),m=l(c.max_fee_per_gas)*2n,y=l(c.max_priority_fee_per_gas)||1n,u=l(c.gas_per_pubdata_limit)*2n}return{...await v({transaction:{...e,gas:i,maxFeePerGas:m,maxPriorityFeePerGas:y},from:t.address}),...e.eip712,gasPerPubdata:u,from:t.address}}function k(a){const{chainId:t,gas:e,nonce:n,to:s,from:r,value:i,maxFeePerGas:m,maxPriorityFeePerGas:y,customSignature:u,factoryDeps:h,paymaster:d,paymasterInput:c,gasPerPubdata:p,data:I}=a,T=[n?o(n):"0x",y?o(y):"0x",m?o(m):"0x",e?o(e):"0x",s??"0x",i?o(i):"0x",I??"0x0",o(t),o(""),o(""),o(t),r??"0x",p?o(p):o(B),h??[],u??"0x",d&&c?[d,c]:[]];return _(["0x71",S(T)])}export{V as populateEip712Transaction,q as sendEip712Transaction,U as signEip712Transaction};
